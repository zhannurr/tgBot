import json
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_questions():
    with open("questions.json", "r", encoding="utf-8") as file:
        return json.load(file)

questions = load_questions()
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç."""
    user_id = update.effective_user.id
    user_data[user_id] = {"current_question": 0, "score": 0, "active": True}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç –ø–æ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º–∞–º.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'.",
        reply_markup=ReplyKeyboardMarkup([["–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"]], resize_keyboard=True)
    )

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ."""
    user_id = update.effective_user.id
    user_data[user_id] = {"current_question": 0, "score": 0, "active": True}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await ask_question(update, context)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.effective_user.id
    data = user_data.get(user_id)

    if not data or "current_question" not in data:
        await start(update, context)
        return

    current_question = data["current_question"]

    if current_question >= len(questions):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await update.message.reply_text(
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data['score']} –∏–∑ {len(questions)}.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'.",
            reply_markup=ReplyKeyboardMarkup([["–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"]], resize_keyboard=True)
        )
        user_data[user_id]["active"] = False  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç
        return

    question = questions[current_question]
    options = [[opt] for opt in question["options"]]

    await update.message.reply_text(
        f"‚ùì {question['question']}",
        reply_markup=ReplyKeyboardMarkup(options, resize_keyboard=True, one_time_keyboard=True)
    )

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
    user_id = update.effective_user.id
    data = user_data.get(user_id)

    if not data or not data.get("active", False):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–µ—Å—Ç
        await update.message.reply_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return

    current_question = data["current_question"]

    if current_question >= len(questions):
        await update.message.reply_text("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return

    question = questions[current_question]
    user_answer = update.message.text.strip()

    if user_answer == question["answer"]:
        data["score"] += 1
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")

    data["current_question"] += 1
    user_data[user_id] = data

    await ask_question(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    token = "7666959651:AAH5FQ4QhDVFJkfS88VMmNnDv_bZfduu2-s"

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç$"), start_test))  # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
